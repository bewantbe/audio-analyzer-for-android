/* Copyright 2014 Eddy Xiao <bewantbe@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package github.bewantbe.audio_analyzer_for_android;

// See also res/values/arrays.xml
class ColorMapArray {
    // Generated by GNU Octave
    // v=int32(floor(flipud(hot(256))*255.99)*[0x10000 0x100 1]'); v=reshape(v, 8, [])'; s=int2str(v); s = [s, 32*ones(size(s,1), 2)]; s=s'; s(9:10:end)=','; s=s'
    static final int[] hot_legacy = {
        16777215, 16777210, 16777205, 16777200, 16777195, 16777190, 16777185, 16777180,
        16777175, 16777170, 16777165, 16777160, 16777155, 16777150, 16777145, 16777140,
        16777135, 16777130, 16777125, 16777120, 16777115, 16777110, 16777105, 16777100,
        16777095, 16777090, 16777085, 16777080, 16777075, 16777070, 16777065, 16777060,
        16777055, 16777050, 16777045, 16777040, 16777035, 16777030, 16777025, 16777020,
        16777015, 16777010, 16777005, 16777000, 16776995, 16776990, 16776985, 16776980,
        16776975, 16776970, 16776965, 16776960, 16776448, 16775680, 16775168, 16774400,
        16773888, 16773120, 16772608, 16771840, 16771328, 16770560, 16770048, 16769280,
        16768768, 16768000, 16767488, 16766720, 16766208, 16765440, 16764928, 16764160,
        16763648, 16762880, 16762368, 16761600, 16761088, 16760320, 16759808, 16759040,
        16758528, 16757760, 16757248, 16756480, 16755968, 16755200, 16754688, 16753920,
        16753408, 16752640, 16752128, 16751360, 16750848, 16750080, 16749568, 16748800,
        16748288, 16747520, 16747008, 16746240, 16745728, 16744960, 16744192, 16743680,
        16742912, 16742400, 16741632, 16741120, 16740352, 16739840, 16739072, 16738560,
        16737792, 16737280, 16736512, 16736000, 16735232, 16734720, 16733952, 16733440,
        16732672, 16732160, 16731392, 16730880, 16730112, 16729600, 16728832, 16728320,
        16727552, 16727040, 16726272, 16725760, 16724992, 16724480, 16723712, 16723200,
        16722432, 16721920, 16721152, 16720640, 16719872, 16719360, 16718592, 16718080,
        16717312, 16716800, 16716032, 16715520, 16714752, 16714240, 16713472, 16712960,
        16712192, 16711680, 16580608, 16384000, 16252928, 16056320, 15925248, 15728640,
        15597568, 15400960, 15269888, 15073280, 14942208, 14745600, 14614528, 14417920,
        14286848, 14090240, 13959168, 13762560, 13631488, 13434880, 13303808, 13107200,
        12976128, 12779520, 12648448, 12451840, 12320768, 12124160, 11993088, 11796480,
        11665408, 11468800, 11337728, 11141120, 11010048, 10813440, 10682368, 10485760,
        10354688, 10158080, 10027008,  9830400,  9699328,  9502720,  9371648,  9175040,
         9043968,  8847360,  8716288,  8519680,  8323072,  8192000,  7995392,  7864320,
         7667712,  7536640,  7340032,  7208960,  7012352,  6881280,  6684672,  6553600,
         6356992,  6225920,  6029312,  5898240,  5701632,  5570560,  5373952,  5242880,
         5046272,  4915200,  4718592,  4587520,  4390912,  4259840,  4063232,  3932160,
         3735552,  3604480,  3407872,  3276800,  3080192,  2949120,  2752512,  2621440,
         2424832,  2293760,  2097152,  1966080,  1769472,  1638400,  1441792,  1310720,
         1114112,   983040,   786432,   655360,   458752,   327680,   131072,        0
    };

    // Generated by GNU Octave
    //   c=[0 0 0; hot(0xff)];
    //   v=int32(floor(flipud(c)*255.99)*[0x10000 0x100 1]');
    //   s=reshape(sprintf('0x%06x, ', v), 10*8, [])(1:end-1,:)';  s(end)=' '
    // Seems that Octave changed their hot map (to match Matlab?), this is the new map.
    static final int[] hot = {
        0xffffff, 0xfffffc, 0xfffff8, 0xfffff4, 0xfffff0, 0xffffec, 0xffffe8, 0xffffe4,
        0xffffe0, 0xffffdc, 0xffffd8, 0xffffd4, 0xffffd0, 0xffffcc, 0xffffc8, 0xffffc4,
        0xffffc0, 0xffffbd, 0xffffb9, 0xffffb5, 0xffffb1, 0xffffad, 0xffffa9, 0xffffa5,
        0xffffa1, 0xffff9d, 0xffff99, 0xffff95, 0xffff91, 0xffff8d, 0xffff89, 0xffff85,
        0xffff81, 0xffff7e, 0xffff7a, 0xffff76, 0xffff72, 0xffff6e, 0xffff6a, 0xffff66,
        0xffff62, 0xffff5e, 0xffff5a, 0xffff56, 0xffff52, 0xffff4e, 0xffff4a, 0xffff46,
        0xffff42, 0xffff3f, 0xffff3b, 0xffff37, 0xffff33, 0xffff2f, 0xffff2b, 0xffff27,
        0xffff23, 0xffff1f, 0xffff1b, 0xffff17, 0xffff13, 0xffff0f, 0xffff0b, 0xffff07,
        0xffff03, 0xffff00, 0xfffd00, 0xfffa00, 0xfff700, 0xfff500, 0xfff200, 0xffef00,
        0xffed00, 0xffea00, 0xffe700, 0xffe500, 0xffe200, 0xffdf00, 0xffdc00, 0xffda00,
        0xffd700, 0xffd400, 0xffd200, 0xffcf00, 0xffcc00, 0xffca00, 0xffc700, 0xffc400,
        0xffc200, 0xffbf00, 0xffbc00, 0xffb900, 0xffb700, 0xffb400, 0xffb100, 0xffaf00,
        0xffac00, 0xffa900, 0xffa700, 0xffa400, 0xffa100, 0xff9e00, 0xff9c00, 0xff9900,
        0xff9600, 0xff9400, 0xff9100, 0xff8e00, 0xff8c00, 0xff8900, 0xff8600, 0xff8400,
        0xff8100, 0xff7e00, 0xff7b00, 0xff7900, 0xff7600, 0xff7300, 0xff7100, 0xff6e00,
        0xff6b00, 0xff6900, 0xff6600, 0xff6300, 0xff6100, 0xff5e00, 0xff5b00, 0xff5800,
        0xff5600, 0xff5300, 0xff5000, 0xff4e00, 0xff4b00, 0xff4800, 0xff4600, 0xff4300,
        0xff4000, 0xff3d00, 0xff3b00, 0xff3800, 0xff3500, 0xff3300, 0xff3000, 0xff2d00,
        0xff2b00, 0xff2800, 0xff2500, 0xff2300, 0xff2000, 0xff1d00, 0xff1a00, 0xff1800,
        0xff1500, 0xff1200, 0xff1000, 0xff0d00, 0xff0a00, 0xff0800, 0xff0500, 0xff0200,
        0xff0000, 0xfd0000, 0xfa0000, 0xf70000, 0xf50000, 0xf20000, 0xef0000, 0xed0000,
        0xea0000, 0xe70000, 0xe50000, 0xe20000, 0xdf0000, 0xdc0000, 0xda0000, 0xd70000,
        0xd40000, 0xd20000, 0xcf0000, 0xcc0000, 0xca0000, 0xc70000, 0xc40000, 0xc20000,
        0xbf0000, 0xbc0000, 0xb90000, 0xb70000, 0xb40000, 0xb10000, 0xaf0000, 0xac0000,
        0xa90000, 0xa70000, 0xa40000, 0xa10000, 0x9e0000, 0x9c0000, 0x990000, 0x960000,
        0x940000, 0x910000, 0x8e0000, 0x8c0000, 0x890000, 0x860000, 0x840000, 0x810000,
        0x7e0000, 0x7b0000, 0x790000, 0x760000, 0x730000, 0x710000, 0x6e0000, 0x6b0000,
        0x690000, 0x660000, 0x630000, 0x610000, 0x5e0000, 0x5b0000, 0x580000, 0x560000,
        0x530000, 0x500000, 0x4e0000, 0x4b0000, 0x480000, 0x460000, 0x430000, 0x400000,
        0x3d0000, 0x3b0000, 0x380000, 0x350000, 0x330000, 0x300000, 0x2d0000, 0x2b0000,
        0x280000, 0x250000, 0x230000, 0x200000, 0x1d0000, 0x1a0000, 0x180000, 0x150000,
        0x120000, 0x100000, 0x0d0000, 0x0a0000, 0x080000, 0x050000, 0x020000, 0x000000
    };

    // c=[0 0 0; jet(0xff)];
    static final int[] jet = {
        0x830000, 0x870000, 0x8b0000, 0x8f0000, 0x930000, 0x970000, 0x9b0000, 0x9f0000,
        0xa30000, 0xa70000, 0xab0000, 0xaf0000, 0xb30000, 0xb70000, 0xbb0000, 0xbf0000,
        0xc30000, 0xc70000, 0xcb0000, 0xcf0000, 0xd30000, 0xd70000, 0xdb0000, 0xdf0000,
        0xe30000, 0xe70000, 0xeb0000, 0xef0000, 0xf30000, 0xf70000, 0xfb0000, 0xff0000,
        0xff0300, 0xff0700, 0xff0b00, 0xff0f00, 0xff1300, 0xff1700, 0xff1b00, 0xff1f00,
        0xff2300, 0xff2700, 0xff2b00, 0xff2f00, 0xff3300, 0xff3700, 0xff3b00, 0xff3f00,
        0xff4300, 0xff4700, 0xff4b00, 0xff4f00, 0xff5300, 0xff5700, 0xff5b00, 0xff5f00,
        0xff6300, 0xff6700, 0xff6b00, 0xff6f00, 0xff7300, 0xff7700, 0xff7b00, 0xff7f00,
        0xff8300, 0xff8700, 0xff8b00, 0xff8f00, 0xff9300, 0xff9700, 0xff9b00, 0xff9f00,
        0xffa300, 0xffa700, 0xffab00, 0xffaf00, 0xffb300, 0xffb700, 0xffbb00, 0xffbf00,
        0xffc300, 0xffc700, 0xffcb00, 0xffcf00, 0xffd300, 0xffd700, 0xffdb00, 0xffdf00,
        0xffe300, 0xffe700, 0xffeb00, 0xffef00, 0xfff300, 0xfff700, 0xfffb00, 0xffff00,
        0xfbff03, 0xf7ff07, 0xf3ff0b, 0xefff0f, 0xebff13, 0xe7ff17, 0xe3ff1b, 0xdfff1f,
        0xdbff23, 0xd7ff27, 0xd3ff2b, 0xcfff2f, 0xcbff33, 0xc7ff37, 0xc3ff3b, 0xbfff3f,
        0xbbff43, 0xb7ff47, 0xb3ff4b, 0xafff4f, 0xabff53, 0xa7ff57, 0xa3ff5b, 0x9fff5f,
        0x9bff63, 0x97ff67, 0x93ff6b, 0x8fff6f, 0x8bff73, 0x87ff77, 0x83ff7b, 0x7fff7f,
        0x7bff83, 0x77ff87, 0x73ff8b, 0x6fff8f, 0x6bff93, 0x67ff97, 0x63ff9b, 0x5fff9f,
        0x5bffa3, 0x57ffa7, 0x53ffab, 0x4fffaf, 0x4bffb3, 0x47ffb7, 0x43ffbb, 0x3fffbf,
        0x3bffc3, 0x37ffc7, 0x33ffcb, 0x2fffcf, 0x2bffd3, 0x27ffd7, 0x23ffdb, 0x1fffdf,
        0x1bffe3, 0x17ffe7, 0x13ffeb, 0x0fffef, 0x0bfff3, 0x07fff7, 0x03fffb, 0x00ffff,
        0x00fbff, 0x00f7ff, 0x00f3ff, 0x00efff, 0x00ebff, 0x00e7ff, 0x00e3ff, 0x00dfff,
        0x00dbff, 0x00d7ff, 0x00d3ff, 0x00cfff, 0x00cbff, 0x00c7ff, 0x00c3ff, 0x00bfff,
        0x00bbff, 0x00b7ff, 0x00b3ff, 0x00afff, 0x00abff, 0x00a7ff, 0x00a3ff, 0x009fff,
        0x009bff, 0x0097ff, 0x0093ff, 0x008fff, 0x008bff, 0x0087ff, 0x0083ff, 0x007fff,
        0x007bff, 0x0077ff, 0x0073ff, 0x006fff, 0x006bff, 0x0067ff, 0x0063ff, 0x005fff,
        0x005bff, 0x0057ff, 0x0053ff, 0x004fff, 0x004bff, 0x0047ff, 0x0043ff, 0x003fff,
        0x003bff, 0x0037ff, 0x0033ff, 0x002fff, 0x002bff, 0x0027ff, 0x0023ff, 0x001fff,
        0x001bff, 0x0017ff, 0x0013ff, 0x000fff, 0x000bff, 0x0007ff, 0x0003ff, 0x0000ff,
        0x0000fb, 0x0000f7, 0x0000f3, 0x0000ef, 0x0000eb, 0x0000e7, 0x0000e3, 0x0000df,
        0x0000db, 0x0000d7, 0x0000d3, 0x0000cf, 0x0000cb, 0x0000c7, 0x0000c3, 0x0000bf,
        0x0000bb, 0x0000b7, 0x0000b3, 0x0000af, 0x0000ab, 0x0000a7, 0x0000a3, 0x00009f,
        0x00009b, 0x000097, 0x000093, 0x00008f, 0x00008b, 0x000087, 0x000083, 0x000000
    };

    // c=[0 0 0; gray(0xff)];
    static final int[] gray = {
        0xffffff, 0xfefefe, 0xfdfdfd, 0xfcfcfc, 0xfbfbfb, 0xfafafa, 0xf9f9f9, 0xf8f8f8,
        0xf7f7f7, 0xf6f6f6, 0xf5f5f5, 0xf4f4f4, 0xf3f3f3, 0xf2f2f2, 0xf1f1f1, 0xf0f0f0,
        0xefefef, 0xeeeeee, 0xededed, 0xececec, 0xebebeb, 0xeaeaea, 0xe9e9e9, 0xe8e8e8,
        0xe7e7e7, 0xe6e6e6, 0xe5e5e5, 0xe4e4e4, 0xe3e3e3, 0xe2e2e2, 0xe1e1e1, 0xe0e0e0,
        0xdfdfdf, 0xdedede, 0xdddddd, 0xdcdcdc, 0xdbdbdb, 0xdadada, 0xd9d9d9, 0xd8d8d8,
        0xd7d7d7, 0xd6d6d6, 0xd5d5d5, 0xd4d4d4, 0xd3d3d3, 0xd2d2d2, 0xd1d1d1, 0xd0d0d0,
        0xcfcfcf, 0xcecece, 0xcdcdcd, 0xcccccc, 0xcbcbcb, 0xcacaca, 0xc9c9c9, 0xc8c8c8,
        0xc7c7c7, 0xc6c6c6, 0xc5c5c5, 0xc4c4c4, 0xc3c3c3, 0xc2c2c2, 0xc1c1c1, 0xc0c0c0,
        0xbfbfbf, 0xbebebe, 0xbdbdbd, 0xbcbcbc, 0xbbbbbb, 0xbababa, 0xb9b9b9, 0xb8b8b8,
        0xb7b7b7, 0xb6b6b6, 0xb5b5b5, 0xb4b4b4, 0xb3b3b3, 0xb2b2b2, 0xb1b1b1, 0xb0b0b0,
        0xafafaf, 0xaeaeae, 0xadadad, 0xacacac, 0xababab, 0xaaaaaa, 0xa9a9a9, 0xa8a8a8,
        0xa7a7a7, 0xa6a6a6, 0xa5a5a5, 0xa4a4a4, 0xa3a3a3, 0xa2a2a2, 0xa1a1a1, 0xa0a0a0,
        0x9f9f9f, 0x9e9e9e, 0x9d9d9d, 0x9c9c9c, 0x9b9b9b, 0x9a9a9a, 0x999999, 0x989898,
        0x979797, 0x969696, 0x959595, 0x949494, 0x939393, 0x929292, 0x919191, 0x909090,
        0x8f8f8f, 0x8e8e8e, 0x8d8d8d, 0x8c8c8c, 0x8b8b8b, 0x8a8a8a, 0x898989, 0x888888,
        0x878787, 0x868686, 0x858585, 0x848484, 0x838383, 0x828282, 0x818181, 0x7f7f7f,
        0x7e7e7e, 0x7d7d7d, 0x7c7c7c, 0x7b7b7b, 0x7a7a7a, 0x797979, 0x787878, 0x777777,
        0x767676, 0x757575, 0x747474, 0x737373, 0x727272, 0x717171, 0x707070, 0x6f6f6f,
        0x6e6e6e, 0x6d6d6d, 0x6c6c6c, 0x6b6b6b, 0x6a6a6a, 0x696969, 0x686868, 0x676767,
        0x666666, 0x656565, 0x646464, 0x636363, 0x626262, 0x616161, 0x606060, 0x5f5f5f,
        0x5e5e5e, 0x5d5d5d, 0x5c5c5c, 0x5b5b5b, 0x5a5a5a, 0x595959, 0x585858, 0x575757,
        0x565656, 0x555555, 0x545454, 0x535353, 0x525252, 0x515151, 0x505050, 0x4f4f4f,
        0x4e4e4e, 0x4d4d4d, 0x4c4c4c, 0x4b4b4b, 0x4a4a4a, 0x494949, 0x484848, 0x474747,
        0x464646, 0x454545, 0x444444, 0x434343, 0x424242, 0x414141, 0x404040, 0x3f3f3f,
        0x3e3e3e, 0x3d3d3d, 0x3c3c3c, 0x3b3b3b, 0x3a3a3a, 0x393939, 0x383838, 0x373737,
        0x363636, 0x353535, 0x343434, 0x333333, 0x323232, 0x313131, 0x303030, 0x2f2f2f,
        0x2e2e2e, 0x2d2d2d, 0x2c2c2c, 0x2b2b2b, 0x2a2a2a, 0x292929, 0x282828, 0x272727,
        0x262626, 0x252525, 0x242424, 0x232323, 0x222222, 0x212121, 0x202020, 0x1f1f1f,
        0x1e1e1e, 0x1d1d1d, 0x1c1c1c, 0x1b1b1b, 0x1a1a1a, 0x191919, 0x181818, 0x171717,
        0x161616, 0x151515, 0x141414, 0x131313, 0x121212, 0x111111, 0x101010, 0x0f0f0f,
        0x0e0e0e, 0x0d0d0d, 0x0c0c0c, 0x0b0b0b, 0x0a0a0a, 0x090909, 0x080808, 0x070707,
        0x060606, 0x050505, 0x040404, 0x030303, 0x020202, 0x010101, 0x000000, 0x000000
    };

    // c = (@(n) rainbow(n) .* (1-exp(-linspace(0,15,n)))')(256);
    static final int[] rainbow_weak_red = {
        0xaa00ff, 0xa700ff, 0xa300ff, 0xa000ff, 0x9d00ff, 0x9900ff, 0x9600ff, 0x9300ff,
        0x8f00ff, 0x8c00ff, 0x8900ff, 0x8500ff, 0x8200ff, 0x7f00ff, 0x7b00ff, 0x7800ff,
        0x7500ff, 0x7100ff, 0x6e00ff, 0x6b00ff, 0x6700ff, 0x6400ff, 0x6100ff, 0x5d00ff,
        0x5a00ff, 0x5700ff, 0x5300ff, 0x5000ff, 0x4c00ff, 0x4900ff, 0x4600ff, 0x4200ff,
        0x3f00ff, 0x3c00ff, 0x3800ff, 0x3500ff, 0x3200ff, 0x2e00ff, 0x2b00ff, 0x2800ff,
        0x2400ff, 0x2100ff, 0x1e00ff, 0x1a00ff, 0x1700ff, 0x1400ff, 0x1000ff, 0x0d00ff,
        0x0a00ff, 0x0600ff, 0x0300ff, 0x0000ff, 0x0005fa, 0x000af5, 0x000ff0, 0x0014eb,
        0x0019e6, 0x001ee1, 0x0023dc, 0x0028d7, 0x002dd2, 0x0032cd, 0x0037c8, 0x003cc3,
        0x0041be, 0x0046b9, 0x004bb4, 0x0050af, 0x0055aa, 0x005aa5, 0x005fa0, 0x00649b,
        0x006996, 0x006e91, 0x00738c, 0x007887, 0x007d82, 0x00827d, 0x008778, 0x008c73,
        0x00916e, 0x009669, 0x009b64, 0x00a05f, 0x00a55a, 0x00aa55, 0x00af50, 0x00b44b,
        0x00b946, 0x00be41, 0x00c33c, 0x00c837, 0x00cd32, 0x00d22d, 0x00d728, 0x00dc23,
        0x00e11e, 0x00e619, 0x00eb14, 0x00f00f, 0x00f50a, 0x00fa05, 0x00ff00, 0x05ff00,
        0x0aff00, 0x0fff00, 0x14ff00, 0x19ff00, 0x1eff00, 0x23ff00, 0x28ff00, 0x2dff00,
        0x32ff00, 0x37ff00, 0x3cff00, 0x41ff00, 0x46ff00, 0x4bff00, 0x50ff00, 0x55ff00,
        0x5aff00, 0x5fff00, 0x64ff00, 0x69ff00, 0x6eff00, 0x73ff00, 0x78ff00, 0x7dff00,
        0x82ff00, 0x87ff00, 0x8cff00, 0x91ff00, 0x96ff00, 0x9bff00, 0xa0ff00, 0xa5ff00,
        0xaaff00, 0xafff00, 0xb4ff00, 0xb9ff00, 0xbeff00, 0xc3ff00, 0xc8ff00, 0xcdff00,
        0xd2ff00, 0xd7ff00, 0xdcff00, 0xe1ff00, 0xe6ff00, 0xebff00, 0xf0ff00, 0xf5ff00,
        0xfaff00, 0xffff00, 0xfffc00, 0xfffa00, 0xfff700, 0xfff500, 0xfff200, 0xfff000,
        0xffed00, 0xfeea00, 0xfee800, 0xfee500, 0xfee300, 0xfee000, 0xfede00, 0xfedb00,
        0xfed900, 0xfed600, 0xfed300, 0xfed100, 0xfece00, 0xfdcc00, 0xfdc900, 0xfdc600,
        0xfdc400, 0xfdc100, 0xfdbf00, 0xfdbc00, 0xfcb900, 0xfcb700, 0xfcb400, 0xfcb200,
        0xfcaf00, 0xfbac00, 0xfbaa00, 0xfba700, 0xfba400, 0xfaa200, 0xfa9f00, 0xfa9c00,
        0xf99a00, 0xf99700, 0xf89400, 0xf89200, 0xf88f00, 0xf78c00, 0xf78a00, 0xf68700,
        0xf58400, 0xf58100, 0xf47f00, 0xf37c00, 0xf37900, 0xf27600, 0xf17400, 0xf07100,
        0xef6e00, 0xee6b00, 0xed6800, 0xec6600, 0xeb6300, 0xea6000, 0xe95d00, 0xe75a00,
        0xe65800, 0xe45500, 0xe25200, 0xe14f00, 0xdf4c00, 0xdd4900, 0xdb4600, 0xd94400,
        0xd64100, 0xd43e00, 0xd13b00, 0xce3800, 0xcb3500, 0xc83300, 0xc53000, 0xc12d00,
        0xbd2a00, 0xb92800, 0xb52500, 0xb12200, 0xac2000, 0xa71d00, 0xa11a00, 0x9c1800,
        0x961600, 0x8f1300, 0x881100, 0x810f00, 0x790d00, 0x710b00, 0x690900, 0x600700,
        0x560500, 0x4c0400, 0x410300, 0x350200, 0x290100, 0x1c0000, 0x0e0000, 0x000000
    };
}
